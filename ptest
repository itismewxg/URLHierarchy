#!/usr/local/bin/python

import sys 
import sample_pb2
import base64
import random
from copy import copy
from google.protobuf.descriptor import FieldDescriptor
from protobuf_to_dict import protobuf_to_dict, TYPE_CALLABLE_MAP
    
def generate_random_message(many):
    for _ in range(many):
        m = random_message()
        print len(m)
        bm = base64.b64encode(m)
        print bm
        print len(bm)
    return bm

def get_dict_of_message(bm):
    m = base64.b64decode(bm)
    smessage = sample_pb2.MessageOfTypes()
    smessage.ParseFromString(m)
    
    type_callable_map = copy(TYPE_CALLABLE_MAP)
    # convert TYPE_BYTES to a Python bytestring
    type_callable_map[FieldDescriptor.TYPE_BYTES] = str 
    
    # my_message is a google.protobuf.message.Message instance
    dm = protobuf_to_dict(smessage, type_callable_map=type_callable_map)
    print dm


rstr = ["this is random string1","ahoa, the second","the 3rd, still random"]
rbytes = [b'abcde', b'fghijk', b'lmnopqrst']
def random_message():
    smessage = sample_pb2.MessageOfTypes()
    smessage.dubl = random.uniform(1.0, 2.0)
    smessage.flot = random.uniform(1.0, 2.0)
    smessage.i32 = random.randint(-1000, 1000) 
    smessage.i64 = random.randint(-1000000, 100000)
    smessage.ui32 = random.randint(100, 100000)
    smessage.ui64 = random.randint(1000000, 1000000000)
    smessage.si32 = random.randint(-5000, 5000)
    smessage.si64 = random.randint(-100000, 200000)
    smessage.f32 = random.randint(0,30000)
    smessage.f64 = random.randint(0, 100000000)
    smessage.sf32 = random.randint(-1000, 1000)
    smessage.sf64 = random.randint(-10000000, 100000000)
    if random.random() < 0.5:
        smessage.bol = True
    else:
        smessage.bol = False
    smessage.strng = rstr[random.randrange(0,3,1)]
    smessage.byts = rbytes[random.randrange(0,3,1)]
    smessage.nested.req = rstr[random.randrange(0,3,1)]
    smessage.enm = sample_pb2.MessageOfTypes.A
    for _ in range(random.randint(1,5)):
        smessage.range.append(random.randint(100,1000))
    for _ in range(random.randint(1,5)):
        r = smessage.nestedRepeated.add()
        r.req = rstr[random.randrange(0,3,1)]
    for _ in range(random.randint(1,5)):
        smessage.enmRepeated.append(sample_pb2.MessageOfTypes.B)
    print smessage.ByteSize()
    return smessage.SerializeToString()

def transform_to_json():
    type_callable_map = copy(TYPE_CALLABLE_MAP)
    # convert TYPE_BYTES to a Python bytestring
    type_callable_map[FieldDescriptor.TYPE_BYTES] = str
    # my_message is a google.protobuf.message.Message instance
    d = protobuf_to_dict(my_message, type_callable_map=type_callable_map)
    return json.dumps(d)

def main():
    get_dict_of_message(generate_random_message(1))
if __name__ == '__main__':
    main()
